<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.vcl</groupId>
  <artifactId>vcl-app</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <name>VCL Application Services</name>
  <packaging>pom</packaging>
  <url>http://maven.apache.org</url>

  
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <modules>
    <module>vcl-core</module>
	<module>vcl-client</module>
    <module>vcl-war</module>
	<module>vcl-swt-client</module>
 </modules>

  <dependencies>
	
	<dependency>
		<groupId>junit</groupId>
		<artifactId>junit</artifactId>
		<version>4.7</version>
		<scope>test</scope>
	</dependency>

  </dependencies>

  <dependencyManagement>
    	<dependencies>
			
			<!-- modules -->
			<!-- ============================================================== -->
			<dependency>
				<groupId>com.vcl</groupId>
				<artifactId>vcl-core</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.vcl</groupId>
				<artifactId>vcl-core</artifactId>
				<classifier>tests</classifier>
				<scope>test</scope>
				<version>${project.version}</version>
			</dependency>

			<dependency>
				<groupId>com.vcl</groupId>
				<artifactId>vcl-client</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.vcl</groupId>
				<artifactId>vcl-client</artifactId>
				<classifier>tests</classifier>
				<scope>test</scope>
				<version>${project.version}</version>
			</dependency>

		
			<!-- servlet --> 
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>servlet-api</artifactId>
				<version>2.5</version>
			</dependency>

		</dependencies>
	</dependencyManagement>

  <!-- those properties are defined in the settings.xml -->
	<distributionManagement>
		<repository>
			<id>${repository.id}</id>
			<url>${repository.url}</url>
		</repository>
		<snapshotRepository>
			<id>${snapshot.id}</id>
			<url>${snapshot.url}</url>
		</snapshotRepository>
		<site>
			<id>${site.id}</id>
			<url>${site.url}/vcl-app</url>
		</site>
	</distributionManagement>
	
	<build>
	    <!-- final name for generating jars is just the artifact id -->
	    <finalName>${project.artifactId}</finalName>
	   
	    <testResources>
			<testResource>
				<filtering>false</filtering>
				<directory>src/test/java</directory>
				<includes>
					<include>**</include>
				</includes>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</testResource>
			<testResource>
				<filtering>true</filtering>
				<directory>src/test/resources</directory>
			</testResource>
	    </testResources>
	    
		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.0</version>
				<configuration>
					<!--
						The compiler uses the environment encoding default (LANG variable
						under linux). If the environment doesn't or specify a different
						encoding than UTF-8, compiling might fail. We enforce here UTF-8
						encoding
					-->
					<encoding>UTF-8</encoding>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
			
			<plugin>
				<artifactId>maven-eclipse-plugin</artifactId>
				<!--
					Up to now (2.8) the filtering section makes the plugin to crash
					with msg : Request to merge when 'filtering' is not identical.
				-->
				<version>2.9-SNAPSHOT</version>
				<configuration>
					<!--
						tells eclipse that this is not an aspectj project and that we want
						the aspectrt jar in the .classpath
					-->
					<ajdtVersion>none</ajdtVersion>
				</configuration>
			</plugin>

			<!-- Generates java sources for use in code generation-->
			<plugin>
			   <groupId>org.apache.maven.plugins</groupId>
			   <artifactId>maven-source-plugin</artifactId>
			   <version>2.1.1</version>
			   <executions>
				   <execution>
					   <phase>generate-sources</phase>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			
			<!-- Execute the integration tests during the integration-test phase -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>**/**ITest.class</exclude>
					</excludes>
				</configuration>
				<executions>
		
					<execution>
						<id>it-test</id>
						<phase>integration-test</phase>
						<goals>
							<goal>test</goal>
						</goals>
						<configuration>
							<excludes>
								<exclude>none</exclude>
						    </excludes>
						    <includes>
							    <include>**/**ITest.class</include>
						    </includes>
							
							<!--
								TODO profile the testing as it seems we've got memory leaks. I'm
								forking all the tests to overcome that pb.
							-->
							<forkMode>always</forkMode>
							<argLine>-Xmx1024M</argLine>
							<!-- TODO fix that by re-using spring configuration -->
							<argLine>-XX:MaxPermSize=256m</argLine>
						</configuration>
					</execution>

				</executions>
			</plugin>
			

			<!--
				Added a test-jar goal to build a jar of all the test code so that we
				can use it with ireports. The test code has all the test data and
				data sources used with ireports
			-->
			<!-- 
				This will also be used by the import data tool
			 -->
			<plugin>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.2</version>
				<executions>
					<execution>
						<goals>
							<goal>test-jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!--
					Compile-Time Weaving | | What about eclipse ? Can we have CTW and
					incremental compilation in eclipse ? | <plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>aspectj-maven-plugin</artifactId> <configuration>
					<complianceLevel>1.6</complianceLevel> <aspectLibraries>
					<aspectLibrary> <groupId>org.springframework</groupId>
					<artifactId>spring-aspects</artifactId> </aspectLibrary>
					</aspectLibraries> </configuration> <executions> <execution> <goals>
					<goal>compile</goal> </goals> </execution> </executions> </plugin>
				-->

	   </plugins> 
	</build>

	<reporting>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<targetJdk>1.6</targetJdk>
					<rulesets>
						<ruleset>/rulesets/codesize.xml</ruleset>
						<!--
							TODO define our own rules as using all that stuff takes ages
							<ruleset>/rulesets/basic.xml</ruleset>
							<ruleset>/rulesets/imports.xml</ruleset>
							<ruleset>/rulesets/braces.xml</ruleset>
							<ruleset>/rulesets/unusedcode.xml</ruleset>
						-->
						<!--
							TODO logging rules This one is not working well for us
							<ruleset>/rulesets/logging-jakarta-commons.xml</ruleset>
						-->
					</rulesets>
				</configuration>
			</plugin>
			<!-- this is the cross-ref plugin (source code in the site) -->
			<plugin>
				<artifactId>maven-jxr-plugin</artifactId>
			</plugin>
			
			<plugin>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>2.1.2</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>issue-tracking</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
		</plugins>
	</reporting>

 <!-- 
 <repositories>
    <repository>
      <id>repository.jboss.org-public</id>
      <name>JBoss repository</name>
      <url>https://repository.jboss.org/nexus/content/groups/public</url>
    </repository>
  </repositories>
  --> 
</project>
